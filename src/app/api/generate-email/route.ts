import { NextResponse } from 'next/server';
import { auth } from '@/lib/auth';
import { z } from 'zod';

const generateEmailSchema = z.object({
  meetingId: z.string().min(1, 'Meeting ID is required'),
  tone: z.enum(['professional', 'casual', 'friendly']).default('professional'),
  clientName: z.string().optional(),
  meetingSummary: z.string().optional(),
});

export async function POST(request: Request) {
  try {
    const session = await auth();
    if (!session?.user?.id) {
      return NextResponse.json(
        { success: false, error: { message: 'Authentication required' } },
        { status: 401 }
      );
    }

    const body = (await request.json()) as unknown;
    const validatedData = generateEmailSchema.parse(body);

    // For demo purposes, generate a mock follow-up email
    const mockEmail = {
      subject: `Follow-up: ${validatedData.clientName || 'Meeting'} - ${new Date().toLocaleDateString()}`,
      content: `Dear ${validatedData.clientName || 'Valued Client'},

I hope this email finds you well. I wanted to follow up on our meeting today and provide you with a summary of our discussion.

## Meeting Summary
${validatedData.meetingSummary || 'We discussed your financial goals and investment strategy. I provided recommendations based on your risk tolerance and timeline.'}

## Next Steps
- Review the investment proposal I sent
- Consider the portfolio adjustments we discussed
- Schedule our next quarterly review

## Key Points Discussed
- Risk assessment and tolerance
- Investment timeline and goals
- Portfolio diversification strategy
- Market outlook and opportunities

I'm confident that the strategies we discussed will help you achieve your financial objectives. Please don't hesitate to reach out if you have any questions or need clarification on any points.

I look forward to our continued partnership and will be in touch soon with additional resources.

Best regards,
Financial Advisor

---
This email was generated by Post-Meeting Social AI
Generated on: ${new Date().toLocaleString()}`,
      tone: validatedData.tone,
      meetingId: validatedData.meetingId,
      generatedAt: new Date().toISOString(),
    };

    return NextResponse.json({
      success: true,
      data: mockEmail,
      metadata: {
        timestamp: new Date().toISOString(),
        requestId: crypto.randomUUID(),
        meetingId: validatedData.meetingId,
      },
    });
  } catch (error) {
    console.error('Email generation error:', error);

    if (error instanceof z.ZodError) {
      return NextResponse.json(
        {
          success: false,
          error: {
            message: 'Invalid request data',
            details: error.errors,
            code: 'VALIDATION_ERROR',
            timestamp: new Date().toISOString(),
          },
        },
        { status: 400 }
      );
    }

    return NextResponse.json(
      {
        success: false,
        error: {
          message: 'Failed to generate follow-up email',
          code: 'EMAIL_GENERATION_ERROR',
          timestamp: new Date().toISOString(),
        },
      },
      { status: 500 }
    );
  }
}
