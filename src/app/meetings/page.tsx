'use client';

import { useState, useEffect, useCallback, useRef } from 'react';
import { useSession } from 'next-auth/react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Navigation } from '@/components/navigation';
import type { Meeting, ApiResponse, CalendarEvent } from '@/types/master-interfaces';
import { MeetingPlatform } from '@/types/master-interfaces';

export default function MeetingsPage() {
  const { data: session, status } = useSession();
  const [meetings, setMeetings] = useState<Meeting[]>([]);
  const [selectedMeeting, setSelectedMeeting] = useState<Meeting | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isTestData, setIsTestData] = useState(false);
  const [showDraftModal, setShowDraftModal] = useState(false);
  const [selectedDraftPost, setSelectedDraftPost] = useState<any>(null);
  const [generatingEmail, setGeneratingEmail] = useState<string | null>(null);
  const [generatingSocial, setGeneratingSocial] = useState<string | null>(null);
  const [autoGeneratingEmail, setAutoGeneratingEmail] = useState<string | null>(null);
  const [editingDraft, setEditingDraft] = useState(false);
  const [editedContent, setEditedContent] = useState('');
  const [activeTab, setActiveTab] = useState('meetings');
  const [postingTo, setPostingTo] = useState<string | null>(null);
  const [postingPlatform, setPostingPlatform] = useState<string | null>(null);
  const autoGeneratedRef = useRef<Set<string>>(new Set());

  // Show loading state while session is being determined
  if (status === 'loading') {
    return (
      <>
        <Navigation />
        <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8 px-4">
          <div className="max-w-6xl mx-auto">
            <div className="text-center">
              <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-600 mx-auto mb-4"></div>
              <h2 className="text-2xl font-semibold text-gray-700 mb-2">Loading...</h2>
              <p className="text-gray-500">Please wait while we verify your authentication</p>
            </div>
          </div>
        </div>
      </>
    );
  }

  const fetchMeetings = useCallback(async () => {
    setIsLoading(true);
    setError(null);

    try {
      const response = await fetch('/api/calendar/events');
      const result = (await response.json()) as ApiResponse<CalendarEvent[]>;

      if (result.success && result.data) {
        // Check if we're showing test data
        setIsTestData((result.metadata as any)?.isTestData || false);

        // Convert calendar events to meeting format (past meetings only)
        const now = new Date();
        const meetingData = result.data
          .filter(event => {
            // Only show past meetings (end time is in the past)
            return event.endTime && new Date(event.endTime) < now;
          })
          .map(event => ({
            id: event.id,
            summary: event.title,
            description: event.description,
            start: {
              dateTime: event.startTime,
              timeZone: 'America/New_York',
            },
            end: {
              dateTime: event.endTime,
              timeZone: 'America/New_York',
            },
            attendees: event.attendees.map(attendee => ({
              email: attendee.email,
              displayName: attendee.name || attendee.email,
              responseStatus: attendee.responseStatus,
            })),
            location: event.location,
            meetingUrl: event.meetingUrl,
            platform: MeetingPlatform.ZOOM,
            status: (() => {
              const now = new Date();
              const startTime = new Date(event.startTime);
              const endTime = new Date(event.endTime);

              if (event.status === 'cancelled') {
                return 'upcoming' as 'completed' | 'recording' | 'upcoming' | 'not-recorded';
              }

              // If no bot assigned, show as "not-recorded"
              if (!event.botData) {
                return 'not-recorded' as 'completed' | 'recording' | 'upcoming' | 'not-recorded';
              }

              // Use bot status if available
              if ((event.botData as any)?.BotStatus?.status) {
                const botStatus = (event.botData as any).BotStatus.status;
                if (botStatus === 'completed') {
                  return 'completed' as 'completed' | 'recording' | 'upcoming' | 'not-recorded';
                } else if (botStatus === 'recording') {
                  return 'recording' as 'completed' | 'recording' | 'upcoming' | 'not-recorded';
                } else if (botStatus === 'scheduled' || botStatus === 'joining') {
                  return 'upcoming' as 'completed' | 'recording' | 'upcoming' | 'not-recorded';
                }
              }

              // Fallback to time-based logic
              if (now < startTime) {
                return 'upcoming' as 'completed' | 'recording' | 'upcoming' | 'not-recorded';
              } else if (now >= startTime && now <= endTime) {
                return 'recording' as 'completed' | 'recording' | 'upcoming' | 'not-recorded';
              } else {
                return 'not-recorded' as 'completed' | 'recording' | 'upcoming' | 'not-recorded';
              }
            })(),
            botId: event.botData?.botId || `bot-${event.id}`,
            transcriptUrl: event.botData?.recallResponse?.transcript_url || undefined,
            recordingUrl: event.botData?.recallResponse?.recording_url || undefined,
            botData: event.botData,
            botStatus: (event.botData as any)?.BotStatus || null,
            transcript: (event.botData as any)?.transcript || null,
            duration: Math.floor(
              (new Date(event.endTime).getTime() - new Date(event.startTime).getTime()) /
                (1000 * 60)
            ),
            participantCount: event.attendees.length,
          }));
        setMeetings(meetingData);

        // Bot status is now included directly from the API

        // Reset auto-generated ref when meetings are fetched
        autoGeneratedRef.current.clear();
      } else {
        setError(result.error?.message || 'Failed to fetch meetings');
      }
    } catch (err) {
      setError('Network error occurred');
    } finally {
      setIsLoading(false);
    }
  }, []);

  const generateFollowUpEmail = async (meetingId: string) => {
    try {
      setGeneratingEmail(meetingId);
      setError(null);

      // Find the meeting to get its details
      const meeting = meetings.find(m => m.id === meetingId);
      if (!meeting) {
        setError('Meeting not found');
        return;
      }

      const response = await fetch('/api/generate-email', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          transcript: `Meeting: ${meeting.summary}\nDate: ${new Date(meeting.start.dateTime).toLocaleString()}\nDuration: ${meeting.duration} minutes\nAttendees: ${meeting.attendees?.map(a => a.displayName || a.email).join(', ') || 'N/A'}\nLocation: ${meeting.location || 'N/A'}`,
          meetingContext: {
            meetingId: meeting.id,
            participants: meeting.attendees?.map(a => a.email) || [],
            duration: meeting.duration || 0,
            date: meeting.start.dateTime,
            summary: meeting.summary,
            location: meeting.location,
          },
          emailSettings: {
            tone: 'professional',
            includeActionItems: true,
            includeNextSteps: true,
          },
        }),
      });

      const result = (await response.json()) as ApiResponse<{ email: string }>;

      if (result.success && result.data) {
        // Update the meeting with generated email
        setMeetings(prev => {
          const updatedMeetings = prev.map(m =>
            m.id === meetingId ? { ...m, followUpEmail: { content: result.data!.email } } : m
          );

          return updatedMeetings;
        });

        // Also update selectedMeeting if it's the same meeting
        if (selectedMeeting && selectedMeeting.id === meetingId) {
          console.log('Updating selectedMeeting with email:', result.data.email);
          setSelectedMeeting(prev =>
            prev ? { ...prev, followUpEmail: { content: result.data!.email } } : null
          );
        }
      } else {
        setError(result.error?.message || 'Failed to generate follow-up email');
      }
    } catch (err) {
      setError('Failed to generate follow-up email');
    } finally {
      setGeneratingEmail(null);
    }
  };

  const generateSocialPost = async (meetingId: string) => {
    try {
      setGeneratingSocial(meetingId);
      setError(null);

      // Find the meeting to get its details
      const meeting = meetings.find(m => m.id === meetingId);
      if (!meeting) {
        setError('Meeting not found');
        return;
      }

      const response = await fetch('/api/generate-posts', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          transcript: `Meeting: ${meeting.summary}\nDate: ${new Date(meeting.start.dateTime).toLocaleString()}\nDuration: ${meeting.duration} minutes\nAttendees: ${meeting.attendees?.map(a => a.displayName || a.email).join(', ') || 'N/A'}\nLocation: ${meeting.location || 'N/A'}`,
          meetingContext: {
            meetingId: meeting.id,
            participants: meeting.attendees?.map(a => a.email) || [],
            duration: meeting.duration || 0,
            date: meeting.start.dateTime,
            summary: meeting.summary,
            location: meeting.location,
          },
          automationSettings: {
            maxPosts: 3,
            includeHashtags: true,
            includeEmojis: false,
            tone: 'professional',
            length: 'medium',
            publishImmediately: false,
            scheduleDelay: 0,
            autoPublish: false,
            requireApproval: true,
            notifyOnGeneration: false,
          },
        }),
      });

      const result = (await response.json()) as ApiResponse<{
        posts: Array<{
          platform: string;
          content: string;
          hashtags: string[];
          wordCount: number;
          characterCount: number;
          estimatedEngagement: string;
          bestTimeToPost: string;
        }>;
        metadata: any;
        meetingContext: any;
        generatedAt: string;
      }>;

      if (result.success && result.data) {
        // Update the meeting with generated social posts
        const socialPost = {
          posts: result.data.posts,
          metadata: result.data.metadata,
          meetingContext: result.data.meetingContext,
          generatedAt: result.data.generatedAt,
        } as any;

        // Update meetings array
        setMeetings(prev => {
          const updatedMeetings = prev.map(m => (m.id === meetingId ? { ...m, socialPost } : m));

          // Force update selectedMeeting if it's the same meeting
          if (selectedMeeting && selectedMeeting.id === meetingId) {
            console.log('Updating selectedMeeting with social post');
            const updatedSelectedMeeting = { ...selectedMeeting, socialPost };
            setSelectedMeeting(updatedSelectedMeeting);
          }

          return updatedMeetings;
        });
      } else {
        const errorMessage = result.error?.message || 'Failed to generate social post';
        setError(errorMessage);
      }
    } catch (err) {
      setError('Failed to generate social post');
    } finally {
      setGeneratingSocial(null);
    }
  };

  const viewDraftPost = (post: any) => {
    setSelectedDraftPost(post);
    setEditedContent(post.content || '');
    setEditingDraft(false);
    setShowDraftModal(true);
  };

  const postToSocialMedia = async (post: any, platform: string) => {
    if (!post || !platform) return;

    setPostingTo(post.id || 'unknown');
    setPostingPlatform(platform);

    try {
      const response = await fetch('/api/social/post', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          platform,
          content: post.content,
          hashtags: post.hashtags || [],
          linkUrl: post.linkUrl || '',
          imageUrl: post.imageUrl || '',
        }),
      });

      const result = await response.json();

      if (result.success) {
        // Show success message
        alert(`✅ Successfully posted to ${platform}!\n\nView your post: ${result.data.postUrl}`);

        // Close the draft modal
        setShowDraftModal(false);
        setSelectedDraftPost(null);
      } else {
        // Show demo error message with specific platform errors
        if (result.demo) {
          alert(
            `❌ ${platform.charAt(0).toUpperCase() + platform.slice(1)} Posting Failed\n\nError: ${result.error}\n\nNote: ${result.message}`
          );
        } else {
          alert(`❌ Failed to post to ${platform}: ${result.error}`);
        }
      }
    } catch (error) {
      console.error('Posting error:', error);
      alert(`❌ Failed to post to ${platform}. Please try again.`);
    } finally {
      setPostingTo(null);
      setPostingPlatform(null);
    }
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    // You could add a toast notification here
  };

  const autoGenerateEmail = async (meetingId: string) => {
    // Find the meeting by ID
    const meeting = meetings.find(m => m.id === meetingId);
    if (!meeting) {
      setError('Meeting not found');
      return;
    }

    try {
      autoGeneratedRef.current.add(meetingId);
      setAutoGeneratingEmail(meetingId);
      setError(null);

      const response = await fetch('/api/generate-email', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          transcript: `Meeting: ${meeting.summary}\nDate: ${new Date(meeting.start.dateTime).toLocaleString()}\nDuration: ${meeting.duration} minutes\nAttendees: ${meeting.attendees?.map(a => a.displayName || a.email).join(', ') || 'N/A'}\nLocation: ${meeting.location || 'N/A'}`,
          meetingContext: {
            meetingId: meeting.id,
            participants: meeting.attendees?.map(a => a.email) || [],
            duration: meeting.duration || 0,
            date: meeting.start.dateTime,
            summary: meeting.summary,
            location: meeting.location,
          },
          emailSettings: {
            tone: 'professional',
            includeActionItems: true,
            includeNextSteps: true,
          },
        }),
      });

      const result = (await response.json()) as ApiResponse<{ email: string }>;

      if (result.success && result.data) {
        // Update the meeting with generated email
        setMeetings(prev => {
          const updatedMeetings = prev.map(m =>
            m.id === meetingId
              ? { ...m, followUpEmail: result.data as Meeting['followUpEmail'] }
              : m
          );

          return updatedMeetings;
        });

        // Also update selectedMeeting if it's the same meeting
        if (selectedMeeting && selectedMeeting.id === meetingId) {
          console.log('Updating selectedMeeting with auto-generated email:', result.data);
          setSelectedMeeting(prev =>
            prev ? { ...prev, followUpEmail: result.data as Meeting['followUpEmail'] } : null
          );
        }
      } else {
        setError(result.error?.message || 'Failed to auto-generate follow-up email');
      }
    } catch (err) {
      setError('Failed to auto-generate follow-up email');
    } finally {
      setAutoGeneratingEmail(null);
    }
  };

  useEffect(() => {
    void fetchMeetings();
  }, [fetchMeetings]);

  // Update selectedMeeting when meetings array changes
  useEffect(() => {
    if (selectedMeeting) {
      const updatedMeeting = meetings.find(m => m.id === selectedMeeting.id);
      if (updatedMeeting) {
        console.log(updatedMeeting);
        // Check if the meeting has been updated (e.g., with new email)
        const hasChanges =
          updatedMeeting.followUpEmail !== selectedMeeting.followUpEmail ||
          (updatedMeeting.socialPost && !selectedMeeting.socialPost) ||
          (selectedMeeting.socialPost &&
            updatedMeeting.socialPost &&
            JSON.stringify(updatedMeeting.socialPost) !==
              JSON.stringify(selectedMeeting.socialPost));

        if (hasChanges) {
          console.log(
            'Updating selectedMeeting with changes:',
            {
              hasEmail: !!updatedMeeting.followUpEmail,
              hasSocialPost: !!updatedMeeting.socialPost,
            },
            updatedMeeting
          );
          setSelectedMeeting(updatedMeeting);
        }
      }
    }
  }, [meetings, selectedMeeting]);

  // Auto-generate email when meeting is selected
  useEffect(() => {
    if (
      selectedMeeting &&
      !selectedMeeting.followUpEmail &&
      !autoGeneratingEmail &&
      !autoGeneratedRef.current.has(selectedMeeting.id)
    ) {
      void autoGenerateEmail(selectedMeeting.id);
    }
  }, [selectedMeeting]);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed':
        return 'bg-green-100 text-green-800';
      case 'recording':
        return 'bg-yellow-100 text-yellow-800';
      case 'upcoming':
        return 'bg-blue-100 text-blue-800';
      case 'not-recorded':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getPlatformIcon = (platform: MeetingPlatform) => {
    switch (platform) {
      case MeetingPlatform.ZOOM:
        return '🔵';
      case MeetingPlatform.MICROSOFT_TEAMS:
        return '🔷';
      case MeetingPlatform.GOOGLE_MEET:
        return '🟢';
      case MeetingPlatform.WEBEX:
        return '🟠';
      default:
        return '🔵'; // Default to Zoom icon
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      <Navigation />
      <div className="py-12 px-4">
        <div className="max-w-6xl mx-auto">
          <div className="text-center mb-8">
            <h1 className="text-4xl font-bold text-gray-900 mb-4">📋 Past Meetings</h1>
            <p className="text-lg text-gray-600">
              View past meetings, transcripts, and generate follow-up content
            </p>
          </div>

          <div className="mb-6">
            <Button
              onClick={() => void fetchMeetings()}
              disabled={isLoading}
              className="w-full sm:w-auto"
            >
              {isLoading ? 'Loading...' : 'Refresh Meetings'}
            </Button>
          </div>

          {error && (
            <Card className="p-6 border-red-200 bg-red-50 mb-6">
              <h3 className="font-semibold text-red-800 mb-2">Error</h3>
              <p className="text-red-700">{error}</p>
            </Card>
          )}

          {isTestData && (
            <Card className="p-4 border-amber-200 bg-amber-50 mb-6">
              <div className="flex items-center gap-3">
                <div className="text-amber-600 text-xl">⚠️</div>
                <div>
                  <h3 className="font-semibold text-amber-800 mb-1">Demo Mode - Test Data</h3>
                  <p className="text-amber-700 text-sm">
                    No real meetings found. Showing sample data to demonstrate the interface.
                    Connect your calendar and schedule meetings to see real data.
                  </p>
                </div>
              </div>
            </Card>
          )}

          <div className="w-full">
            <div className="grid w-full grid-cols-2 mb-4">
              <button
                onClick={() => setActiveTab('meetings')}
                className={`px-4 py-2 text-sm font-medium rounded-t-lg border-b-2 transition-colors ${
                  activeTab === 'meetings'
                    ? 'bg-blue-50 text-blue-600 border-blue-600'
                    : 'bg-gray-50 text-gray-600 border-gray-200 hover:bg-gray-100'
                }`}
              >
                All Meetings {activeTab === 'meetings' && '✓'}
              </button>
              <button
                onClick={() => setActiveTab('details')}
                className={`px-4 py-2 text-sm font-medium rounded-t-lg border-b-2 transition-colors ${
                  activeTab === 'details'
                    ? 'bg-blue-50 text-blue-600 border-blue-600'
                    : 'bg-gray-50 text-gray-600 border-gray-200 hover:bg-gray-100'
                }`}
              >
                Meeting Details {activeTab === 'details' && '✓'}
              </button>
            </div>

            {activeTab === 'meetings' && (
              <div className="space-y-4">
                <div className="grid gap-4">
                  {meetings.map(meeting => (
                    <Card key={meeting.id} className="p-6">
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <div className="flex items-center gap-3 mb-2">
                            <h3 className="text-lg font-semibold">{meeting.summary}</h3>
                            <Badge className={getStatusColor(meeting.status)}>
                              {meeting.status}
                            </Badge>
                            <Badge variant="outline">
                              {getPlatformIcon(meeting.platform || MeetingPlatform.OTHER)}{' '}
                              {meeting.platform}
                            </Badge>
                          </div>

                          <p className="text-gray-600 mb-2">
                            {new Date(meeting.start.dateTime).toLocaleString()}
                          </p>

                          {meeting.attendees && meeting.attendees.length > 0 && (
                            <div className="mb-2">
                              <p className="text-sm text-gray-600">
                                Attendees:{' '}
                                {meeting.attendees.map(a => a.displayName || a.email).join(', ')}
                              </p>
                            </div>
                          )}

                          {meeting.duration && (
                            <p className="text-sm text-gray-600 mb-2">
                              Duration: {Math.floor(meeting.duration / 60)} minutes
                            </p>
                          )}

                          {/* Bot Information */}
                          {meeting.botData && (
                            <div className="mt-3 p-3 bg-green-50 border border-green-200 rounded-lg">
                              <div className="flex items-center gap-2 mb-2">
                                <span className="text-green-800 font-medium">
                                  🤖 Bot Information
                                </span>
                                <Badge variant="outline" className="bg-green-100 text-green-800">
                                  {meeting.botData.status}
                                </Badge>
                              </div>

                              <div className="grid grid-cols-2 gap-2 text-xs text-gray-700">
                                <div>
                                  <strong>Bot ID:</strong> {meeting.botData.botId.slice(-8)}
                                </div>
                                <div>
                                  <strong>External ID:</strong>{' '}
                                  {meeting.botData.externalBotId.slice(-8)}
                                </div>
                                <div>
                                  <strong>Join Time:</strong> {meeting.botData.joinMinutesBefore}{' '}
                                  min before
                                </div>
                                <div>
                                  <strong>Scheduled:</strong>{' '}
                                  {new Date(meeting.botData.scheduledAt).toLocaleString()}
                                </div>
                              </div>

                              {/* Settings Used */}
                              <div className="mt-2 p-2 bg-white rounded border text-xs">
                                <div className="font-medium text-gray-700 mb-1">Settings Used:</div>
                                <div className="grid grid-cols-3 gap-1">
                                  <div>
                                    Join: {meeting.botData.settingsUsed.joinMinutesBefore}min
                                  </div>
                                  <div>Max: {meeting.botData.settingsUsed.maxConcurrentBots}</div>
                                  <div>
                                    Auto: {meeting.botData.settingsUsed.autoSchedule ? 'Yes' : 'No'}
                                  </div>
                                </div>
                              </div>

                              {/* Bot Status */}
                              {meeting.botStatus && (
                                <div className="mt-2 p-2 bg-blue-50 rounded border text-xs">
                                  <div className="font-medium text-blue-800 mb-1">
                                    Live Bot Status:
                                  </div>
                                  <div className="grid grid-cols-2 gap-1">
                                    <div>Status: {meeting.botStatus.status}</div>
                                    {meeting.botStatus.hasRecording && (
                                      <div className="text-green-600">✓ Recording Available</div>
                                    )}
                                    {meeting.botStatus.hasTranscript && (
                                      <div className="text-green-600">✓ Transcript Available</div>
                                    )}
                                    {meeting.botStatus.hasSummary && (
                                      <div className="text-green-600">✓ Summary Available</div>
                                    )}
                                    {meeting.botStatus.participantCount && (
                                      <div>Participants: {meeting.botStatus.participantCount}</div>
                                    )}
                                    {meeting.botStatus.transcriptWordCount && (
                                      <div>Words: {meeting.botStatus.transcriptWordCount}</div>
                                    )}
                                  </div>
                                  {meeting.transcript && (
                                    <div className="mt-2 p-1 bg-white rounded text-xs">
                                      <div className="font-medium text-gray-700 mb-1">
                                        Transcript Preview:
                                      </div>
                                      <p className="text-gray-600 line-clamp-2">
                                        {meeting.transcript.substring(0, 100)}...
                                      </p>
                                    </div>
                                  )}
                                </div>
                              )}

                              {/* Bot Configuration */}
                              {meeting.botData.BotStatus?.config && (
                                <div className="mt-2 p-3 bg-purple-50 rounded-lg border border-purple-200">
                                  <div className="font-medium text-purple-800 mb-2 flex items-center gap-2">
                                    <span>⚙️</span>
                                    Bot Configuration
                                  </div>
                                  <div className="grid grid-cols-2 gap-2">
                                    <div className="flex items-center gap-2">
                                      <span
                                        className={`w-2 h-2 rounded-full ${meeting.botData.BotStatus.config.recordAudio ? 'bg-green-500' : 'bg-red-500'}`}
                                      ></span>
                                      <span className="text-xs text-gray-700">
                                        Audio:{' '}
                                        {meeting.botData.BotStatus.config.recordAudio
                                          ? 'On'
                                          : 'Off'}
                                      </span>
                                    </div>
                                    <div className="flex items-center gap-2">
                                      <span
                                        className={`w-2 h-2 rounded-full ${meeting.botData.BotStatus.config.recordVideo ? 'bg-green-500' : 'bg-red-500'}`}
                                      ></span>
                                      <span className="text-xs text-gray-700">
                                        Video:{' '}
                                        {meeting.botData.BotStatus.config.recordVideo
                                          ? 'On'
                                          : 'Off'}
                                      </span>
                                    </div>
                                    <div className="flex items-center gap-2">
                                      <span
                                        className={`w-2 h-2 rounded-full ${meeting.botData.BotStatus.config.recordScreen ? 'bg-green-500' : 'bg-red-500'}`}
                                      ></span>
                                      <span className="text-xs text-gray-700">
                                        Screen:{' '}
                                        {meeting.botData.BotStatus.config.recordScreen
                                          ? 'On'
                                          : 'Off'}
                                      </span>
                                    </div>
                                    <div className="flex items-center gap-2">
                                      <span
                                        className={`w-2 h-2 rounded-full ${meeting.botData.BotStatus.config.transcriptionEnabled ? 'bg-green-500' : 'bg-red-500'}`}
                                      ></span>
                                      <span className="text-xs text-gray-700">
                                        Transcript:{' '}
                                        {meeting.botData.BotStatus.config.transcriptionEnabled
                                          ? 'On'
                                          : 'Off'}
                                      </span>
                                    </div>
                                  </div>
                                </div>
                              )}

                              {/* Recall.ai Details */}
                              <div className="mt-2 p-2 bg-gray-50 rounded border text-xs">
                                <div className="font-medium text-gray-700 mb-1">
                                  Recall.ai Details:
                                </div>
                                <div className="grid grid-cols-2 gap-1">
                                  <div>
                                    Name: {meeting.botData.recallResponse.bot_name || 'N/A'}
                                  </div>
                                  <div>
                                    Audio:{' '}
                                    {meeting.botData.recallResponse.record_audio ? 'Yes' : 'No'}
                                  </div>
                                  <div>
                                    Video:{' '}
                                    {meeting.botData.recallResponse.record_video ? 'Yes' : 'No'}
                                  </div>
                                  <div>
                                    Screen:{' '}
                                    {meeting.botData.recallResponse.record_screen ? 'Yes' : 'No'}
                                  </div>
                                </div>
                              </div>
                            </div>
                          )}
                        </div>

                        <div className="flex flex-col gap-2">
                          {meeting.botData && (
                            <Button
                              onClick={() => {
                                setSelectedMeeting(meeting);
                                setActiveTab('details');
                              }}
                              size="sm"
                              className="bg-blue-600 hover:bg-blue-700 text-white font-medium px-4 py-2 rounded-lg shadow-sm transition-colors"
                            >
                              📋 View Details & Generate Templates
                            </Button>
                          )}
                        </div>
                      </div>
                    </Card>
                  ))}
                </div>

                {meetings.length === 0 && !isLoading && (
                  <Card className="p-8 text-center">
                    <h3 className="text-lg font-semibold text-gray-800 mb-2">
                      No Past Meetings Found
                    </h3>
                    <p className="text-gray-600">
                      No completed meetings found. Past meetings will appear here after they finish.
                    </p>
                  </Card>
                )}
              </div>
            )}

            {activeTab === 'details' && (
              <div className="space-y-4">
                {selectedMeeting ? (
                  <Card className="p-6">
                    <div className="mb-6">
                      <h2 className="text-2xl font-bold mb-2">{selectedMeeting.summary}</h2>
                      <Button
                        onClick={() => setActiveTab('meetings')}
                        variant="outline"
                        className="w-full"
                      >
                        ← Back to All Meetings
                      </Button>
                    </div>

                    {/* Meeting Overview */}
                    <div className="bg-gray-50 p-4 rounded-lg mb-6">
                      <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                        <span>📅</span>
                        Meeting Overview
                      </h3>
                      <div className="grid md:grid-cols-3 gap-6">
                        {/* Basic Info */}
                        <div className="space-y-3">
                          <h4 className="font-medium text-gray-800 mb-2">📅 Schedule</h4>
                          <div className="space-y-2">
                            <div className="flex items-center gap-3">
                              <span className="text-gray-500">🕐</span>
                              <div>
                                <p className="text-sm text-gray-600">Start Time</p>
                                <p className="font-medium text-sm">
                                  {new Date(selectedMeeting.start.dateTime).toLocaleString()}
                                </p>
                              </div>
                            </div>
                            <div className="flex items-center gap-3">
                              <span className="text-gray-500">🕕</span>
                              <div>
                                <p className="text-sm text-gray-600">End Time</p>
                                <p className="font-medium text-sm">
                                  {new Date(selectedMeeting.end.dateTime).toLocaleString()}
                                </p>
                              </div>
                            </div>
                            {selectedMeeting.duration && (
                              <div className="flex items-center gap-3">
                                <span className="text-gray-500">⏱️</span>
                                <div>
                                  <p className="text-sm text-gray-600">Duration</p>
                                  <p className="font-medium text-sm">
                                    {Math.floor(selectedMeeting.duration / 60)} minutes
                                  </p>
                                </div>
                              </div>
                            )}
                          </div>
                        </div>

                        {/* Meeting Details */}
                        <div className="space-y-3">
                          <h4 className="font-medium text-gray-800 mb-2">🔗 Meeting Details</h4>
                          <div className="space-y-2">
                            <div className="flex items-center gap-3">
                              <span className="text-gray-500">🔵</span>
                              <div>
                                <p className="text-sm text-gray-600">Platform</p>
                                <p className="font-medium text-sm">Zoom</p>
                              </div>
                            </div>
                            <div className="flex items-center gap-3">
                              <span className="text-gray-500">📊</span>
                              <div>
                                <p className="text-sm text-gray-600">Status</p>
                                <Badge className={getStatusColor(selectedMeeting.status)}>
                                  {selectedMeeting.status}
                                </Badge>
                              </div>
                            </div>
                            {selectedMeeting.meetingUrl && (
                              <div className="flex items-center gap-3">
                                <span className="text-gray-500">🔗</span>
                                <div>
                                  <p className="text-sm text-gray-600">Meeting Link</p>
                                  <a
                                    href={selectedMeeting.meetingUrl}
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    className="text-blue-600 hover:underline text-sm font-mono break-all"
                                  >
                                    {selectedMeeting.meetingUrl.length > 40
                                      ? `${selectedMeeting.meetingUrl.substring(0, 40)}...`
                                      : selectedMeeting.meetingUrl}
                                  </a>
                                </div>
                              </div>
                            )}
                            {selectedMeeting.location && (
                              <div className="flex items-center gap-3">
                                <span className="text-gray-500">📍</span>
                                <div>
                                  <p className="text-sm text-gray-600">Location</p>
                                  <p className="font-medium text-sm">{selectedMeeting.location}</p>
                                </div>
                              </div>
                            )}
                          </div>
                        </div>

                        {/* Participants & Organizer */}
                        <div className="space-y-3">
                          <h4 className="font-medium text-gray-800 mb-2">👥 Participants</h4>
                          <div className="space-y-2">
                            {selectedMeeting.attendees && selectedMeeting.attendees.length > 0 ? (
                              <>
                                <div className="flex items-center gap-3">
                                  <span className="text-gray-500">👥</span>
                                  <div>
                                    <p className="text-sm text-gray-600">Attendees</p>
                                    <p className="font-medium text-sm">
                                      {selectedMeeting.attendees.length} participant
                                      {selectedMeeting.attendees.length !== 1 ? 's' : ''}
                                    </p>
                                  </div>
                                </div>
                                <div className="ml-6 space-y-1">
                                  {selectedMeeting.attendees.slice(0, 3).map((attendee, index) => (
                                    <div key={index} className="flex items-center gap-2">
                                      <span className="text-xs text-gray-500">•</span>
                                      <span className="text-xs text-gray-700">
                                        {attendee.displayName || attendee.email}
                                      </span>
                                      <Badge
                                        variant="outline"
                                        className={`text-xs ${
                                          attendee.responseStatus === 'accepted'
                                            ? 'bg-green-100 text-green-800'
                                            : attendee.responseStatus === 'declined'
                                              ? 'bg-red-100 text-red-800'
                                              : 'bg-yellow-100 text-yellow-800'
                                        }`}
                                      >
                                        {attendee.responseStatus}
                                      </Badge>
                                    </div>
                                  ))}
                                  {selectedMeeting.attendees.length > 3 && (
                                    <p className="text-xs text-gray-500 ml-4">
                                      +{selectedMeeting.attendees.length - 3} more
                                    </p>
                                  )}
                                </div>
                              </>
                            ) : (
                              <div className="flex items-center gap-3">
                                <span className="text-gray-500">👤</span>
                                <div>
                                  <p className="text-sm text-gray-600">Organizer Only</p>
                                  <p className="font-medium text-sm">No additional attendees</p>
                                </div>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>

                      {/* Description */}
                      {selectedMeeting.description && (
                        <div className="mt-4 pt-4 border-t border-gray-200">
                          <h4 className="font-medium text-gray-800 mb-2 flex items-center gap-2">
                            <span>📝</span>
                            Description
                          </h4>
                          <div
                            className="text-sm text-gray-700 bg-white p-3 rounded border"
                            dangerouslySetInnerHTML={{
                              __html: selectedMeeting.description.replace(/\n/g, '<br>'),
                            }}
                          />
                        </div>
                      )}
                    </div>

                    {/* Bot Information */}
                    {selectedMeeting.botData && (
                      <div className="bg-green-50 p-4 rounded-lg mb-6">
                        <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
                          <span>🤖</span>
                          Bot Information
                        </h3>
                        <div className="grid md:grid-cols-2 gap-4">
                          <div className="space-y-3">
                            <div className="flex items-center gap-3">
                              <span className="text-gray-500">🆔</span>
                              <div>
                                <p className="text-sm text-gray-600">Bot ID</p>
                                <p className="font-mono text-sm">
                                  {selectedMeeting.botData.botId.slice(-8)}
                                </p>
                              </div>
                            </div>
                            <div className="flex items-center gap-3">
                              <span className="text-gray-500">⏰</span>
                              <div>
                                <p className="text-sm text-gray-600">Join Time</p>
                                <p className="font-medium">
                                  {selectedMeeting.botData.joinMinutesBefore} minutes before
                                </p>
                              </div>
                            </div>
                            <div className="flex items-center gap-3">
                              <span className="text-gray-500">📅</span>
                              <div>
                                <p className="text-sm text-gray-600">Scheduled</p>
                                <p className="font-medium">
                                  {new Date(selectedMeeting.botData.scheduledAt).toLocaleString()}
                                </p>
                              </div>
                            </div>
                          </div>
                          <div className="space-y-3">
                            {selectedMeeting.botStatus && (
                              <>
                                <div className="flex items-center gap-3">
                                  <span className="text-gray-500">📊</span>
                                  <div>
                                    <p className="text-sm text-gray-600">Bot Status</p>
                                    <Badge variant="outline" className="bg-blue-100 text-blue-800">
                                      {selectedMeeting.botStatus.status}
                                    </Badge>
                                  </div>
                                </div>
                                {selectedMeeting.botStatus.config && (
                                  <div className="flex items-center gap-3">
                                    <span className="text-gray-500">⚙️</span>
                                    <div>
                                      <p className="text-sm text-gray-600">Configuration</p>
                                      <div className="flex gap-2 mt-1">
                                        <span
                                          className={`w-2 h-2 rounded-full ${selectedMeeting.botStatus.config.recordAudio ? 'bg-green-500' : 'bg-red-500'}`}
                                        ></span>
                                        <span
                                          className={`w-2 h-2 rounded-full ${selectedMeeting.botStatus.config.recordVideo ? 'bg-green-500' : 'bg-red-500'}`}
                                        ></span>
                                        <span
                                          className={`w-2 h-2 rounded-full ${selectedMeeting.botStatus.config.recordScreen ? 'bg-green-500' : 'bg-red-500'}`}
                                        ></span>
                                        <span
                                          className={`w-2 h-2 rounded-full ${selectedMeeting.botStatus.config.transcriptionEnabled ? 'bg-green-500' : 'bg-red-500'}`}
                                        ></span>
                                      </div>
                                    </div>
                                  </div>
                                )}
                              </>
                            )}
                          </div>
                        </div>
                      </div>
                    )}

                    {/* Transcript Section - Scrollable 5-line preview for long transcripts */}
                    <div className="mt-6">
                      <h3 className="text-lg font-semibold mb-2 flex items-center gap-2">
                        <span>📝</span>
                        Meeting Transcript
                      </h3>
                      <div className="bg-gray-50 p-4 rounded-lg">
                        <p className="text-sm text-gray-600 mb-2">
                          {selectedMeeting.transcript ? (
                            <a
                              href={selectedMeeting.transcriptUrl}
                              target="_blank"
                              rel="noopener noreferrer"
                              className="text-blue-600 hover:underline"
                            >
                              View full transcript →
                            </a>
                          ) : (
                            'Transcript will be available after the meeting is processed.'
                          )}
                        </p>

                        {/* Scrollable transcript preview - exactly 5 lines, scrollable for long content */}
                        <div className="bg-white rounded border">
                          {selectedMeeting.transcript ? (
                            <div className="relative">
                              {/* 5-line scrollable container */}
                              <div
                                className="p-3 text-sm text-gray-700 leading-relaxed overflow-y-auto"
                                style={{
                                  height: '7.5rem', // Exactly 5 lines (5 * 1.5 line-height)
                                  lineHeight: '1.5',
                                }}
                              >
                                {selectedMeeting.transcript}
                              </div>

                              {/* Transcript stats */}
                              <div className="px-3 py-2 bg-gray-50 border-t text-xs text-gray-500 flex items-center justify-between">
                                <span>
                                  {selectedMeeting.transcript.split('\n').length} lines •{' '}
                                  {selectedMeeting.transcript.length} characters
                                </span>
                                <span>Scroll to read more</span>
                              </div>
                            </div>
                          ) : (
                            <div className="p-3">
                              <p className="text-gray-500 italic text-sm">
                                Transcript will be available after the meeting is processed.
                              </p>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>

                    {/* Follow-up Email Section */}
                    <div className="mt-6">
                      <div className="flex justify-between items-center mb-2">
                        <h3 className="text-lg font-semibold">Generated Follow-up Email</h3>
                        {selectedMeeting.followUpEmail && (
                          <div className="flex gap-2">
                            <Button
                              onClick={() => void autoGenerateEmail(selectedMeeting.id)}
                              size="sm"
                              variant="outline"
                              disabled={
                                generatingEmail === selectedMeeting.id ||
                                generatingSocial === selectedMeeting.id
                              }
                            >
                              {generatingEmail === selectedMeeting.id
                                ? 'Regenerating...'
                                : 'Regenerate'}
                            </Button>
                            <Button
                              onClick={() => {
                                setSelectedDraftPost({
                                  content: selectedMeeting.followUpEmail?.content || '',
                                  subject: selectedMeeting.followUpEmail?.subject,
                                  actionItems: selectedMeeting.followUpEmail?.actionItems,
                                  type: 'email',
                                });
                                setEditedContent(selectedMeeting.followUpEmail?.content || '');
                                setEditingDraft(false);
                                setShowDraftModal(true);
                              }}
                              size="sm"
                              variant="outline"
                            >
                              View Draft
                            </Button>
                          </div>
                        )}
                      </div>

                      {autoGeneratingEmail === selectedMeeting.id ? (
                        <div className="bg-blue-50 p-4 rounded-lg">
                          <div className="flex items-center gap-3">
                            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
                            <p className="text-sm text-blue-700">Generating follow-up email...</p>
                          </div>
                        </div>
                      ) : selectedMeeting.followUpEmail ? (
                        <div className="bg-gray-50 p-4 rounded-lg">
                          {selectedMeeting.followUpEmail.subject && (
                            <div className="mb-3">
                              <h4 className="font-semibold text-sm text-gray-800 mb-1">Subject:</h4>
                              <p className="text-sm text-gray-700">
                                {selectedMeeting.followUpEmail.subject}
                              </p>
                            </div>
                          )}
                          <div className="mb-3">
                            <h4 className="font-semibold text-sm text-gray-800 mb-1">Content:</h4>
                            <pre className="whitespace-pre-wrap text-sm text-gray-700">
                              {selectedMeeting.followUpEmail.content}
                            </pre>
                          </div>
                          {selectedMeeting.followUpEmail.actionItems &&
                            selectedMeeting.followUpEmail.actionItems.length > 0 && (
                              <div>
                                <h4 className="font-semibold text-sm text-gray-800 mb-1">
                                  Action Items:
                                </h4>
                                <ul className="list-disc list-inside text-sm text-gray-700 space-y-1">
                                  {selectedMeeting.followUpEmail.actionItems.map(
                                    (action: string, index: number) => (
                                      <li key={index}>{action}</li>
                                    )
                                  )}
                                </ul>
                              </div>
                            )}
                        </div>
                      ) : (
                        <div className="bg-gray-50 p-4 rounded-lg text-center">
                          <p className="text-sm text-gray-600 mb-2">
                            No follow-up email generated yet
                          </p>
                          <Button
                            onClick={() => void generateFollowUpEmail(selectedMeeting.id)}
                            size="sm"
                            variant="outline"
                            disabled={
                              generatingEmail === selectedMeeting.id ||
                              generatingSocial === selectedMeeting.id
                            }
                          >
                            {generatingEmail === selectedMeeting.id
                              ? 'Generating...'
                              : 'Generate Email'}
                          </Button>
                        </div>
                      )}
                    </div>

                    {/* Social Media Posts Section */}
                    <div className="mt-6">
                      <div className="flex justify-between items-center mb-4">
                        <h3 className="text-lg font-semibold flex items-center gap-2">
                          <span>📱</span>
                          Social Media Posts
                        </h3>
                        {!selectedMeeting.socialPost && (
                          <Button
                            onClick={() => void generateSocialPost(selectedMeeting.id)}
                            size="sm"
                            className="bg-blue-600 hover:bg-blue-700"
                            disabled={generatingSocial === selectedMeeting.id}
                          >
                            {generatingSocial === selectedMeeting.id
                              ? 'Generating...'
                              : 'Generate Posts'}
                          </Button>
                        )}
                      </div>

                      {generatingSocial === selectedMeeting.id ? (
                        <div className="bg-blue-50 p-6 rounded-lg">
                          <div className="flex items-center gap-3">
                            <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-blue-600"></div>
                            <div>
                              <p className="text-sm font-medium text-blue-800">
                                Generating social media posts...
                              </p>
                              <p className="text-xs text-blue-600">
                                Creating content for multiple platforms
                              </p>
                            </div>
                          </div>
                        </div>
                      ) : selectedMeeting.socialPost ? (
                        <div className="space-y-4">
                          {selectedMeeting.socialPost.posts &&
                          Array.isArray(selectedMeeting.socialPost.posts) ? (
                            selectedMeeting.socialPost.posts.map((post: any, index: number) => (
                              <div
                                key={index}
                                className="bg-white border border-gray-200 rounded-lg overflow-hidden shadow-sm"
                              >
                                {/* Platform Header */}
                                <div
                                  className={`px-4 py-3 border-b ${
                                    post.platform?.toLowerCase().includes('linkedin')
                                      ? 'bg-blue-50 border-blue-200'
                                      : post.platform?.toLowerCase().includes('twitter')
                                        ? 'bg-sky-50 border-sky-200'
                                        : post.platform?.toLowerCase().includes('facebook')
                                          ? 'bg-indigo-50 border-indigo-200'
                                          : post.platform?.toLowerCase().includes('instagram')
                                            ? 'bg-pink-50 border-pink-200'
                                            : 'bg-gray-50 border-gray-200'
                                  }`}
                                >
                                  <div className="flex items-center justify-between">
                                    <div className="flex items-center gap-3">
                                      <div
                                        className={`w-8 h-8 rounded-full flex items-center justify-center ${
                                          post.platform?.toLowerCase().includes('linkedin')
                                            ? 'bg-blue-100'
                                            : post.platform?.toLowerCase().includes('twitter')
                                              ? 'bg-sky-100'
                                              : post.platform?.toLowerCase().includes('facebook')
                                                ? 'bg-indigo-100'
                                                : post.platform?.toLowerCase().includes('instagram')
                                                  ? 'bg-pink-100'
                                                  : 'bg-gray-100'
                                        }`}
                                      >
                                        {post.platform?.toLowerCase().includes('linkedin')
                                          ? '💼'
                                          : post.platform?.toLowerCase().includes('twitter')
                                            ? '🐦'
                                            : post.platform?.toLowerCase().includes('facebook')
                                              ? '📘'
                                              : post.platform?.toLowerCase().includes('instagram')
                                                ? '📷'
                                                : '📱'}
                                      </div>
                                      <div>
                                        <h4 className="font-semibold text-sm text-gray-800">
                                          {post.platform || `Post ${index + 1}`}
                                        </h4>
                                        <p className="text-xs text-gray-600">
                                          {post.wordCount} words • {post.characterCount} characters
                                        </p>
                                      </div>
                                    </div>
                                    <div className="flex items-center gap-2">
                                      {post.estimatedEngagement && (
                                        <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded-full">
                                          {post.estimatedEngagement} engagement
                                        </span>
                                      )}
                                      <Button
                                        onClick={() =>
                                          viewDraftPost({ ...post, platform: post.platform })
                                        }
                                        size="sm"
                                        variant="outline"
                                        className="text-xs"
                                      >
                                        View Draft
                                      </Button>
                                    </div>
                                  </div>
                                </div>

                                {/* Post Content */}
                                <div className="p-4">
                                  <p className="text-sm text-gray-700 leading-relaxed mb-3">
                                    {post.content}
                                  </p>

                                  {/* Hashtags */}
                                  {post.hashtags && post.hashtags.length > 0 && (
                                    <div className="flex flex-wrap gap-1">
                                      {post.hashtags.map((hashtag: string, tagIndex: number) => (
                                        <span
                                          key={tagIndex}
                                          className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full hover:bg-blue-200 transition-colors"
                                        >
                                          {hashtag}
                                        </span>
                                      ))}
                                    </div>
                                  )}
                                </div>

                                {/* Post Stats */}
                                <div className="px-4 py-2 bg-gray-50 border-t text-xs text-gray-500 flex items-center justify-between">
                                  <span>Best time to post: {post.bestTimeToPost || 'Anytime'}</span>
                                  <span>
                                    {post.characterCount}/
                                    {post.platform?.toLowerCase().includes('twitter')
                                      ? '280'
                                      : '2000'}{' '}
                                    characters
                                  </span>
                                </div>
                              </div>
                            ))
                          ) : (
                            <div className="bg-white border border-gray-200 rounded-lg p-4">
                              <div className="flex justify-between items-start mb-3">
                                <h4 className="font-medium text-sm text-gray-800">
                                  Generated Post
                                </h4>
                                <Button
                                  onClick={() =>
                                    viewDraftPost({
                                      ...selectedMeeting.socialPost,
                                      platform: 'social',
                                    })
                                  }
                                  size="sm"
                                  variant="outline"
                                >
                                  View Draft
                                </Button>
                              </div>
                              <p className="text-sm text-gray-600 leading-relaxed">
                                {selectedMeeting.socialPost &&
                                'posts' in selectedMeeting.socialPost &&
                                (selectedMeeting.socialPost as any).posts &&
                                Array.isArray((selectedMeeting.socialPost as any).posts) &&
                                (selectedMeeting.socialPost as any).posts.length > 0
                                  ? (selectedMeeting.socialPost as any).posts[0].content
                                  : 'No content available'}
                              </p>
                            </div>
                          )}
                        </div>
                      ) : (
                        <div className="bg-gray-50 p-8 rounded-lg text-center">
                          <div className="text-gray-400 mb-4">
                            <svg
                              className="w-12 h-12 mx-auto"
                              fill="none"
                              stroke="currentColor"
                              viewBox="0 0 24 24"
                            >
                              <path
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                strokeWidth={1.5}
                                d="M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2m-9 0h10m-9 0a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V6a2 2 0 00-2-2M9 8h6m-6 4h6m-6 4h4"
                              />
                            </svg>
                          </div>
                          <h4 className="font-medium text-gray-800 mb-2">
                            No Social Media Posts Generated
                          </h4>
                          <p className="text-sm text-gray-600 mb-4">
                            Generate engaging social media content based on your meeting insights
                          </p>
                          <Button
                            onClick={() => void generateSocialPost(selectedMeeting.id)}
                            className="bg-blue-600 hover:bg-blue-700"
                            disabled={generatingSocial === selectedMeeting.id}
                          >
                            {generatingSocial === selectedMeeting.id
                              ? 'Generating...'
                              : 'Generate Posts'}
                          </Button>
                        </div>
                      )}
                    </div>
                  </Card>
                ) : (
                  <Card className="p-8 text-center">
                    <h3 className="text-lg font-semibold text-gray-800 mb-4">
                      No Meeting Selected
                    </h3>
                    <p className="text-gray-600 mb-6">
                      Please select a meeting from the "All Meetings" tab to view its details.
                    </p>
                    <Button
                      onClick={() => setActiveTab('meetings')}
                      className="bg-blue-600 hover:bg-blue-700"
                    >
                      ← Back to All Meetings
                    </Button>
                  </Card>
                )}
              </div>
            )}
          </div>
        </div>

        {/* Draft Post Modal */}
        {showDraftModal && selectedDraftPost && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
              <div className="p-6">
                <div className="flex justify-between items-center mb-4">
                  <h2 className="text-2xl font-bold">
                    {selectedDraftPost?.type === 'email' ? 'Draft Email' : 'Draft Post'}
                  </h2>
                  <button
                    onClick={() => setShowDraftModal(false)}
                    className="text-gray-400 hover:text-gray-600"
                  >
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M6 18L18 6M6 6l12 12"
                      />
                    </svg>
                  </button>
                </div>

                <p className="text-gray-600 mb-4">
                  {selectedDraftPost?.type === 'email'
                    ? 'Review and edit the generated follow-up email.'
                    : 'Generate a post based on insights from this meeting.'}
                </p>

                <div className="bg-gray-50 p-4 rounded-lg mb-6">
                  <div className="flex justify-between items-center mb-3">
                    <h4 className="font-medium text-sm text-gray-800">Content</h4>
                    <Button
                      onClick={() => setEditingDraft(!editingDraft)}
                      size="sm"
                      variant="outline"
                    >
                      {editingDraft ? 'Preview' : 'Edit'}
                    </Button>
                  </div>

                  {editingDraft ? (
                    <div>
                      <textarea
                        value={editedContent}
                        onChange={e => setEditedContent(e.target.value)}
                        className="w-full h-64 p-3 border border-gray-300 rounded-lg text-sm font-mono resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder="Edit your content here..."
                      />
                      {selectedDraftPost.type !== 'email' &&
                        selectedDraftPost.hashtags &&
                        selectedDraftPost.hashtags.length > 0 && (
                          <div className="mt-3">
                            <p className="text-xs text-gray-600 mb-1">Hashtags:</p>
                            <div className="flex flex-wrap gap-1">
                              {selectedDraftPost.hashtags.map((hashtag: string, index: number) => (
                                <span
                                  key={index}
                                  className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded"
                                >
                                  {hashtag}
                                </span>
                              ))}
                            </div>
                          </div>
                        )}
                    </div>
                  ) : (
                    <div className="text-sm leading-relaxed">
                      {selectedDraftPost.type === 'email' ? (
                        <div>
                          {selectedDraftPost.subject && (
                            <div className="mb-3">
                              <h4 className="font-semibold text-sm text-gray-800 mb-1">Subject:</h4>
                              <p className="text-sm text-gray-700">{selectedDraftPost.subject}</p>
                            </div>
                          )}
                          <div className="mb-3">
                            <h4 className="font-semibold text-sm text-gray-800 mb-1">Content:</h4>
                            <pre className="whitespace-pre-wrap text-sm text-gray-700">
                              {editedContent || selectedDraftPost.content}
                            </pre>
                          </div>
                          {selectedDraftPost.actionItems &&
                            selectedDraftPost.actionItems.length > 0 && (
                              <div>
                                <h4 className="font-semibold text-sm text-gray-800 mb-1">
                                  Action Items:
                                </h4>
                                <ul className="list-disc list-inside text-sm text-gray-700 space-y-1">
                                  {selectedDraftPost.actionItems.map(
                                    (action: string, index: number) => (
                                      <li key={index}>{action}</li>
                                    )
                                  )}
                                </ul>
                              </div>
                            )}
                        </div>
                      ) : selectedDraftPost.content ? (
                        <div>
                          <p className="mb-3">{editedContent || selectedDraftPost.content}</p>
                          {selectedDraftPost.hashtags && selectedDraftPost.hashtags.length > 0 && (
                            <div className="mt-3">
                              <p className="text-blue-600 font-medium">
                                {selectedDraftPost.hashtags.join(' ')}
                              </p>
                            </div>
                          )}
                          <div className="mt-4 pt-3 border-t border-gray-200">
                            <p className="text-xs text-gray-500 italic">
                              The views expressed are for informational purposes only and do not
                              constitute financial advice. Past performance is no guarantee of
                              future results.
                            </p>
                          </div>
                        </div>
                      ) : (
                        <pre className="whitespace-pre-wrap">
                          {JSON.stringify(selectedDraftPost, null, 2)}
                        </pre>
                      )}
                    </div>
                  )}
                </div>

                <div className="flex gap-3">
                  <Button
                    onClick={() =>
                      copyToClipboard(
                        editedContent ||
                          selectedDraftPost.content ||
                          JSON.stringify(selectedDraftPost)
                      )
                    }
                    variant="outline"
                    className="flex items-center gap-2"
                  >
                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"
                      />
                    </svg>
                    Copy
                  </Button>
                  <Button onClick={() => setShowDraftModal(false)} variant="outline">
                    Cancel
                  </Button>

                  {selectedDraftPost?.type === 'email' ? (
                    <Button
                      onClick={() => {
                        if (!selectedMeeting || !selectedDraftPost) {
                          return;
                        }

                        // Update email content
                        const updatedEmail = {
                          ...selectedMeeting.followUpEmail,
                          content: editedContent,
                        };

                        // Update meetings state
                        setMeetings(prevMeetings =>
                          prevMeetings.map(meeting => {
                            if (meeting.id === selectedMeeting.id) {
                              return { ...meeting, followUpEmail: updatedEmail };
                            }
                            return meeting;
                          })
                        );

                        // Update selectedMeeting
                        setSelectedMeeting(prev => ({
                          ...prev!,
                          followUpEmail: updatedEmail,
                        }));

                        // Update the selectedDraftPost with edited content
                        setSelectedDraftPost((prev: any) => ({
                          ...prev,
                          content: editedContent,
                        }));
                        setEditingDraft(false);
                        setShowDraftModal(false);
                      }}
                      className="bg-green-600 hover:bg-green-700"
                    >
                      Save
                    </Button>
                  ) : (
                    <div className="flex gap-2">
                      {/* LinkedIn Post Button */}
                      <Button
                        onClick={() => postToSocialMedia(selectedDraftPost, 'linkedin')}
                        disabled={
                          postingTo === selectedDraftPost.id && postingPlatform === 'linkedin'
                        }
                        className="bg-blue-600 hover:bg-blue-700 flex items-center gap-2"
                      >
                        {postingTo === selectedDraftPost.id && postingPlatform === 'linkedin' ? (
                          <>
                            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                            Posting...
                          </>
                        ) : (
                          <>
                            <span>💼</span>
                            Post to LinkedIn
                            <span className="text-xs bg-blue-500 px-2 py-1 rounded-full">Demo</span>
                          </>
                        )}
                      </Button>

                      {/* Facebook Post Button */}
                      <Button
                        onClick={() => postToSocialMedia(selectedDraftPost, 'facebook')}
                        disabled={
                          postingTo === selectedDraftPost.id && postingPlatform === 'facebook'
                        }
                        className="bg-indigo-600 hover:bg-indigo-700 flex items-center gap-2"
                      >
                        {postingTo === selectedDraftPost.id && postingPlatform === 'facebook' ? (
                          <>
                            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                            Posting...
                          </>
                        ) : (
                          <>
                            <span>📘</span>
                            Post to Facebook
                            <span className="text-xs bg-indigo-500 px-2 py-1 rounded-full">
                              Demo
                            </span>
                          </>
                        )}
                      </Button>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
